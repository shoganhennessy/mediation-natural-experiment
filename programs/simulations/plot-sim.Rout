
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 20 Jan 2025
> ## Plot the system for indirect + direct effects, with Roy selection.
> # Show the date:
> print(format(Sys.time(), "%H:%M %Z %A, %d %B %Y"))
[1] "16:23 EST Wednesday, 05 February 2025"
> 
> ## Load libraries
> # Functions for data manipulation and visualisation
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> # Library for better colour choice.
> library(ggthemes)
> # Library for equations in plots
> library(latex2exp)
> 
> ## Set up the R environment
> set.seed(47)
> # Define number of digits in tables and graphs
> digits.no <- 3
> # Define where output files go.
> output.folder <- file.path("sim-output")
> # Set the options for the plot sizes, in saving ggplot output.
> fig.height <- 10
> fig.width <- fig.height
> # Define colours to use.
> colour.list <- c("orange", "blue")
> 
> 
> ################################################################################
> ## Load the simulated data.  (saved as separate file in advance.)
> 
> # Load data from bootstrapping 10,000 times.
> boot.data <- read_csv(file.path(output.folder, "boot-sim-data-test.csv"))
Rows: 100 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (6): truth_direct_effect, ols_direct_effect, cf_direct_effect, truth_ind...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(boot.data)
# A tibble: 100 × 6
   truth_direct_effect ols_direct_effect cf_direct_effect truth_indirect_effect
                 <dbl>             <dbl>            <dbl>                 <dbl>
 1                1.44             0.575             1.31                  1.13
 2                1.44             0.565             1.41                  1.13
 3                1.44             0.531             1.39                  1.13
 4                1.44             0.526             1.34                  1.13
 5                1.44             0.589             1.47                  1.13
 6                1.44             0.539             1.37                  1.13
 7                1.44             0.515             1.34                  1.13
 8                1.44             0.527             1.55                  1.13
 9                1.44             0.508             1.28                  1.13
10                1.44             0.588             1.41                  1.13
# ℹ 90 more rows
# ℹ 2 more variables: ols_indirect_effect <dbl>, cf_indirect_effect <dbl>
> 
> # Load the data file for varying correlated errors, rho values
> rho.data <- read_csv(file.path(output.folder, "rho-sim-data.csv"))
Rows: 9 Columns: 19
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (19): truth_direct_effect, truth_indirect_effect, ols_direct_effect, ols...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(names(rho.data))
 [1] "truth_direct_effect"     "truth_indirect_effect"  
 [3] "ols_direct_effect"       "ols_direct_effect_se"   
 [5] "ols_direct_effect_up"    "ols_direct_effect_low"  
 [7] "ols_indirect_effect"     "ols_indirect_effect_se" 
 [9] "ols_indirect_effect_up"  "ols_indirect_effect_low"
[11] "cf_direct_effect"        "cf_direct_effect_se"    
[13] "cf_direct_effect_up"     "cf_direct_effect_low"   
[15] "cf_indirect_effect"      "cf_indirect_effect_se"  
[17] "cf_indirect_effect_up"   "cf_indirect_effect_low" 
[19] "rho"                    
> 
> # Load the data file for varying correlated errors, sigma values
> sigma.data <- read_csv(file.path(output.folder, "sigma-sim-data.csv"))
Rows: 9 Columns: 19
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (19): truth_direct_effect, truth_indirect_effect, ols_direct_effect, ols...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(names(sigma.data))
 [1] "truth_direct_effect"     "truth_indirect_effect"  
 [3] "ols_direct_effect"       "ols_direct_effect_se"   
 [5] "ols_direct_effect_up"    "ols_direct_effect_low"  
 [7] "ols_indirect_effect"     "ols_indirect_effect_se" 
 [9] "ols_indirect_effect_up"  "ols_indirect_effect_low"
[11] "cf_direct_effect"        "cf_direct_effect_se"    
[13] "cf_direct_effect_up"     "cf_direct_effect_low"   
[15] "cf_indirect_effect"      "cf_indirect_effect_se"  
[17] "cf_indirect_effect_up"   "cf_indirect_effect_low" 
[19] "sigma"                  
> 
> 
> ################################################################################
> ## Plot the bootstrap dist of the ADE and AIE estimates.
> 
> # ADE estimates, by type.
> direct_boot.plot <- boot.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = ols_direct_effect, y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     annotate("text", colour = colour.list[1],
+         x = 1, y = 7.5,
+         fontface = "bold",
+         label = ("OLS"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[1],
+         x = 1, y = 7.25,
+         xend = 0.75, yend = 6,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Dist of CF estimates.
+     geom_density(aes(x = cf_direct_effect, y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     annotate("text", colour = colour.list[2],
+         x = 2, y = 2.5,
+         fontface = "bold",
+         label = ("Control function"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[2],
+         x = 1.875, y = 2.25,
+         xend = 1.675, yend = 1.25,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Truth value
+     geom_vline(xintercept = mean(boot.data$truth_direct_effect),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     annotate("text", colour = "black",
+         x = 2, y = 7,
+         fontface = "bold",
+         label = ("Truth"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = "black",
+         x = 1.875, y = 6.875,
+         xend = 1.5, yend = 6.5,
+         linewidth = 0.75,
+         curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = "Estimate",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "direct-boot.png"),
+     plot = direct_boot.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> # AIE estimates, by type.
> indirect_boot.plot <- boot.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = ols_indirect_effect, y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = cf_indirect_effect, y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     # Truth value
+     geom_vline(xintercept = mean(boot.data$truth_indirect_effect),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = "Estimate",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "indirect-boot.png"),
+     plot = indirect_boot.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> ################################################################################
> ## Plot the Direct effect estimates, by OLS + CF, different $\rho$ values.
> 
> # Plot the bias in direct effect est vs rho
> rho_directeffect_bias.plot <- rho.data %>%
+     ggplot(aes(x = rho)) +
+     # OLS est + 95 % CI
+     geom_point(aes(y = ols_direct_effect), colour = colour.list[1]) +
+     geom_ribbon(aes(ymin = ols_direct_effect_low, ymax = ols_direct_effect_up),
+         fill = colour.list[1], alpha = 0.2) +
+     annotate("text", colour = colour.list[1],
+         x = 0.375, y = 0.2,
+         fontface = "bold",
+         label = ("OLS"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[1],
+         x = 0.25, y = 0.25,
+         xend = 0.0125, yend = 0.5,
+         linewidth = 0.75,
+         curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # CF est + 95 % CI
+     geom_point(aes(y = cf_direct_effect), colour = colour.list[2]) +
+     geom_ribbon(aes(ymin = cf_direct_effect_low, ymax = cf_direct_effect_up),
+         fill = colour.list[2], alpha = 0.2) +
+     annotate("text", colour = colour.list[2],
+         x = -0.5, y = 0.875,
+         fontface = "bold",
+         label = ("Control function"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[2],
+         x = -0.375, y = 1,
+         xend = -0.25, yend = 1.3,
+         linewidth = 0.75,
+         curvature = 0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Truth:
+     geom_hline(aes(yintercept = truth_direct_effect),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     annotate("text", colour = "black",
+         x = 0.65, y = 1.8,
+         fontface = "bold",
+         label = ("Truth"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = "black",
+         x = 0.6, y = 1.75,
+         xend = 0.475, yend = 1.4875,
+         linewidth = 0.75, curvature = 0.125,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Presentation options
+     theme_bw() +
+     scale_x_continuous(
+         name = TeX("$\\rho$"),
+         expand = c(0, 0),
+         breaks = seq(-1, 1, by = 0.25),
+         limits = c(-1.025, 1.025)) +
+     scale_y_continuous(name = "",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5),
+         expand = c(0.01, 0.01)) +
+     ggtitle("Estimate") +
+     theme(plot.title = element_text(hjust = 0, size = rel(1)),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 1.5, 0.25), "mm"),
+         axis.title.x = element_text(vjust = -0.25))
> # Save this plot
> ggsave(file.path(output.folder, "rho-directeffect-bias.png"),
+     plot = rho_directeffect_bias.plot, dpi = 300,
+     units = "cm", width = fig.width, height = fig.height)
> 
> # Plot the bias in indirect effect est vs rho
> rho_indirecteffect_bias.plot <- rho.data %>%
+     ggplot(aes(x = rho)) +
+     # OLS est + 95 % CI
+     geom_point(aes(y = ols_indirect_effect), colour = colour.list[1]) +
+     geom_ribbon(aes(ymin = ols_indirect_effect_low, ymax = ols_indirect_effect_up),
+         fill = colour.list[1], alpha = 0.2) +
+     # CF est + 95 % CI
+     geom_point(aes(y = cf_indirect_effect), colour = colour.list[2]) +
+     geom_ribbon(aes(ymin = cf_indirect_effect_low, ymax = cf_indirect_effect_up),
+         fill = colour.list[2], alpha = 0.2) +
+     # Truth:
+     geom_hline(aes(yintercept = mean(truth_indirect_effect)),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Presentation options
+     theme_bw() +
+     scale_x_continuous(
+         name = TeX("$\\rho$"),
+         expand = c(0, 0),
+         breaks = seq(-1, 1, by = 0.25),
+         limits = c(-1.025, 1.025)) +
+     scale_y_continuous(name = "",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5),
+         expand = c(0.01, 0.01)) +
+     ggtitle("Estimate") +
+     theme(plot.title = element_text(hjust = 0, size = rel(1)),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 1.5, 0.25), "mm"),
+         axis.title.x = element_text(vjust = -0.25))
> # Save this plot
> ggsave(file.path(output.folder, "rho-indirecteffect-bias.png"),
+     plot = rho_indirecteffect_bias.plot, dpi = 300,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> ################################################################################
> ## Plot the CF effect estimates, by OLS + CF, different $\sigma$ values.
> 
> # Plot the bias in direct effect est vs sigma
> sigma_directeffect_bias.plot <- sigma.data %>%
+     ggplot(aes(x = sigma)) +
+     # OLS est + 95 % CI
+     geom_point(aes(y = ols_direct_effect), colour = colour.list[1]) +
+     geom_ribbon(aes(ymin = ols_direct_effect_low,
+         ymax = ols_direct_effect_up),
+         fill = colour.list[1], alpha = 0.2) +
+     # CF est + 95 % CI
+     geom_point(aes(y = cf_direct_effect), colour = colour.list[2]) +
+     geom_ribbon(aes(ymin = cf_direct_effect_low, ymax = cf_direct_effect_up),
+         fill = colour.list[2], alpha = 0.2) +
+     # Truth:
+     geom_line(aes(y = truth_direct_effect),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Presentation options
+     theme_bw() +
+     scale_x_continuous(
+         name = TeX("$\\sigma_1$"),
+         expand = c(0, 0),
+         breaks = seq(0, 2, by = 0.25),
+         limits = c(-0.02, 2.02)) +
+     scale_y_continuous(name = "",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5),
+         expand = c(0.01, 0.01)) +
+     ggtitle("Estimate") +
+     theme(plot.title = element_text(hjust = 0, size = rel(1)),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 1.5, 0.25), "mm"),
+         axis.title.x = element_text(vjust = -0.25))
> # Save this plot
> ggsave(file.path(output.folder, "sigma-directeffect-bias.png"),
+     plot = sigma_directeffect_bias.plot, dpi = 300,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> # Plot the bias in indirect effect est vs sigma
> sigma_indirecteffect_bias.plot <- sigma.data %>%
+     ggplot(aes(x = sigma)) +
+     # OLS est + 95 % CI
+     geom_point(aes(y = ols_indirect_effect), colour = colour.list[1]) +
+     geom_ribbon(aes(ymin = ols_indirect_effect_low,
+         ymax = ols_indirect_effect_up),
+         fill = colour.list[1], alpha = 0.2) +
+     # CF est + 95 % CI
+     geom_point(aes(y = cf_indirect_effect), colour = colour.list[2]) +
+     geom_ribbon(aes(ymin = cf_indirect_effect_low, ymax = cf_indirect_effect_up),
+         fill = colour.list[2], alpha = 0.2) +
+     # Truth:
+     geom_line(aes(y = truth_indirect_effect),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Presentation options
+     theme_bw() +
+     scale_x_continuous(
+         name = TeX("$\\sigma_1$"),
+         expand = c(0, 0),
+         breaks = seq(0, 2, by = 0.25),
+         limits = c(-0.02, 2.02)) +
+     scale_y_continuous(name = "",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5),
+         expand = c(0.01, 0.01)) +
+     ggtitle("Estimate") +
+     theme(plot.title = element_text(hjust = 0, size = rel(1)),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 1.5, 0.25), "mm"),
+         axis.title.x = element_text(vjust = -0.25))
> # Save this plot
> ggsave(file.path(output.folder, "sigma-indirecteffect-bias.png"),
+     plot = sigma_indirecteffect_bias.plot, dpi = 300,
+     units = "cm", width = fig.width, height = fig.height)
> 
> proc.time()
   user  system elapsed 
  3.798   0.238   4.798 
