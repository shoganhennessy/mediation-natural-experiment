
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 16 Jan 2025
> ## Simulate the system for indirect + direct effects, with Roy selection.
> # Show the date:
> print(format(Sys.time(), "%H:%M %Z %A, %d %B %Y"))
[1] "10:22 EST Tuesday, 04 February 2025"
> 
> ## Load libraries
> # Functions for data manipulation and visualisation
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> # Library for better colour choice.
> library(ggthemes)
> # Library for equations in plots
> library(latex2exp)
> # Causal medation package, Imai Keele Yamamoto (2010)
> library(mediation)
Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading required package: mvtnorm
Loading required package: sandwich
mediation: Causal Mediation Analysis
Version: 4.5.0

> # Package for classical selection estimators (i.e., MLE)
> library(sampleSelection)
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> # Package for semi-parametric regressor
> library(splines)
> 
> ## Set up the R environment
> set.seed(47)
> # Define number of digits in tables and graphs
> digits.no <- 3
> # Define where output files go.
> output.folder <- file.path("sim-output")
> # Set the options for the plot sizes, in saving ggplot output.
> fig.height <- 10
> fig.width <- fig.height
> 
> # Define the sample size to work with.
> sample.N <- 10^4
> 
> 
> ################################################################################
> ## Define a function to simulate data in the triangular system.
> 
> # Define a function to simulate all observed + unobserved data 
> simulate.data <- function(rho, sigma_0, sigma_1, sigma_C,
+         sample.size = sample.N){
+     ### Inputs:
+     ## X, a matrix of covariates, continuous or binary values.
+     ## rho \in [-1, +1] measuring correlation between U_0, U_1.
+     ## sigma_0 >= 0 measuring standard deviation of U_0.
+     ## sigma_1 >= 0 measuring standard deviation of U_1.
+     ## sigma_C >= 0 measuring standard deviation of U_C.
+     ## sample.size: integer, representing output sample size i.e., N.
+     # First covariate (\vec X_i^-)
+     X_minus <- 4 + rnorm(sample.size, mean = 0, sd = 1)
+     # Second covariate (instrument for the control function).
+     X_IV <- rbinom(sample.size, 1, 1 / 2)
+     # Simulate the unobserved error terms.
+     U_both <- MASS::mvrnorm(
+         n = sample.size,
+         mu = c(0, 0, 0),
+         Sigma = matrix(c(
+             sigma_0^2,                rho * sigma_0 * sigma_1,  0,
+             rho * sigma_0 * sigma_1,  sigma_1^2,                0,
+             0,                        0,                        sigma_C^2), ncol = 3),
+         empirical = FALSE)
+     U_0 <- U_both[, 1]
+     U_1 <- U_both[, 2]
+     U_C <- U_both[, 3]
+     # Define the mean potential outcomes.
+     mu_outcome_z_d_X <- function(z, d, x_minus){
+         return(x_minus + (z + d + z * d))
+     }
+     mu_cost_z_X <- function(z, x_minus, x_iv){
+         return(- 3 * z + x_minus - x_iv)
+     }
+     # Y_i(Z, D) = mu_D(Z; X_i) + U_D
+     Y_0_0 <- mu_outcome_z_d_X(0, 0, X_minus) + U_0
+     Y_0_1 <- mu_outcome_z_d_X(0, 1, X_minus) + U_1
+     Y_1_0 <- mu_outcome_z_d_X(1, 0, X_minus) + U_0
+     Y_1_1 <- mu_outcome_z_d_X(1, 1, X_minus) + U_1
+     # D_i(Z)= 1{ Y(Z, 1) - Y(Z, 0) >= C_i }
+     D_0 <- as.integer(Y_0_1 - Y_0_0 >= mu_cost_z_X(0, X_minus, X_IV) + U_C)
+     D_1 <- as.integer(Y_1_1 - Y_1_0 >= mu_cost_z_X(1, X_minus, X_IV) + U_C)
+     # Generate the individual effects (direct + indirect)
+     probZ <- 0.5
+     Z <- rbinom(sample.size, 1, probZ)
+     # Observed outcomes: D, Y
+     D <- (Z * D_1) + ((1 - Z) * D_0)
+     # Generate the list of observed outcomes
+     Y <- (Z * D * Y_1_1) +
+         (Z * (1 - D) * Y_1_0) +
+         ((1 - Z) * D * Y_0_1) +
+         ((1 - Z) * (1 - D) * Y_0_0)
+     # Put these data to a coherent data frame.
+     combined.data <- data.frame(
+         # Observed data
+         Z, D, Y,  X_minus, X_IV,
+         # Unobserved, potential outcomes and compliance.
+         D_0, D_1,
+         Y_0_0, Y_0_1, Y_1_0, Y_1_1,
+         #mu0_Z0_X, mu1_Z0_X, mu0_Z1_X, mu1_Z1_X, muC_Z0_X, muC_Z1_X, 
+         U_0, U_1, U_C)
+     # Return the simulated data as a data frame.
+     return(combined.data)
+ }
> 
> 
> ################################################################################
> ## Define a function to show the theoretical values for the data.
> theoretical.values <- function(sim.data, digits.no = 3, print.truth = FALSE){
+     ### Inputs:
+     ## sim.data, a data frame simulated from above.
+     # Extract the potentials from simulated data.
+     Z <- sim.data$Z
+     D <- sim.data$D
+     Y <- sim.data$Y
+     X_minus <- sim.data$X_minus
+     X_IV <- sim.data$X_IV
+     D_0 <- sim.data$D_0
+     D_1 <- sim.data$D_1
+     Y_0_0 <- sim.data$Y_0_0
+     Y_0_1 <- sim.data$Y_0_1
+     Y_1_0 <- sim.data$Y_1_0
+     Y_1_1 <- sim.data$Y_1_1
+     U_0 <- sim.data$U_0
+     U_1 <- sim.data$U_1
+     U_C <- sim.data$U_C
+     # Get the true first-stage effects
+     first_stage <- D_1 - D_0
+     average_first_stage <- mean(first_stage)
+     # Get the theoretical total effect/reduced form/ITT
+     total_effect <-
+         (Y_1_1 - Y_0_0) * (D_1 == 1 & D_0 == 0) +
+         (Y_1_1 - Y_0_1) * (D_1 == 1 & D_0 == 1) +
+         (Y_1_0 - Y_0_0) * (D_1 == 0 & D_0 == 0)
+     average_total_effect <- mean(total_effect)
+     # Get the theoretical indirect effect.
+     indirect_effect <-
+         (Z * (Y_1_1 - Y_1_0) + (1 - Z) * (Y_0_1 - Y_0_0)) * (D_1 == 1 & D_0 == 0)
+     average_indirect_effect <- mean(indirect_effect)
+     # Get the theoretical direct effect.
+     direct_effect <- #(D * (Y_1_1 - Y_0_1) + (1 - D) * (Y_1_0 - Y_0_0))
+         (D * (Y_1_1 - Y_0_1) + (1 - D) * (Y_1_0 - Y_0_0)) * (D_1 == 1 & D_0 == 0) +
+         (Y_1_1 - Y_0_1) * (D_1 == 1 & D_0 == 1) +
+         (Y_1_0 - Y_0_0) * (D_1 == 0 & D_0 == 0)
+     average_direct_effect <- mean(direct_effect)
+     # Show the real underlying values.
+     if (print.truth == TRUE){
+         print("Here is a summary of the (unobserved) true effects:")
+         # Show how many ATs, NTs, Compliers in terms of D_i(Z) for Z = 0, 1.
+         print("How many compliers in the system?")
+         print(table(D_1, D_0) / NROW(sim.data))
+         # Show the real treatment effects
+         print(paste0(c("The average total effect:",    as.numeric(average_total_effect))))
+         print(paste0(c("The average first-stage:",     as.numeric(average_first_stage))))
+         print(paste0(c("The average direct effect:",   as.numeric(average_direct_effect))))
+         print(paste0(c("The average indirect effect:", as.numeric(average_indirect_effect))))
+     
+     }
+     # Define a named list to return
+     output.list <- list(
+         average_first_stage     = average_first_stage,
+         average_total_effect    = average_total_effect,
+         average_direct_effect   = average_direct_effect,
+         average_indirect_effect = average_indirect_effect)
+     # Return the output.list
+     return(output.list)
+ }
> 
> ################################################################################
> ## Define a function to estimate mediation, given the first + second-stages.
> 
> # Estimate the values, given a first and second-stages
> estimated.values <- function(firststage.reg, secondstage.reg, example.data){
+     ### Inputs:
+     ## example.data, a data frame simulated from above.
+     # calculate the first-stage by prediction
+     firststage.est <- predict(
+         firststage.reg, newdata = mutate(example.data, Z = 1), type = "response") - predict(
+             firststage.reg, newdata = mutate(example.data, Z = 0), type = "response")
+     # calculate the second-stage direct effect
+     direct.est <- predict(
+         secondstage.reg, newdata = mutate(example.data, Z = 1)) -
+         predict(secondstage.reg, newdata = mutate(example.data, Z = 0))
+     # calculate the second-stage indirect effect
+     indirect.est <- predict(
+         secondstage.reg, newdata = mutate(example.data, D = 1)) -
+         predict(secondstage.reg, newdata = mutate(example.data, D = 0))
+     # Add on the K_0, K_1 conditional on D_i = 0, 1 respectively for compliers.
+     # Estimate the kappa-weight
+     hat_probZ <- 0.5
+     kappa_1 <- example.data$D * ((example.data$Z - hat_probZ) / (
+         (1 - hat_probZ) * hat_probZ))
+     kappa_0 <- (1 - example.data$D) * (((1 - example.data$Z) - (1 - hat_probZ)) / (
+         (1 - hat_probZ) * hat_probZ))
+     kappa.weight <- kappa_1 * hat_probZ + kappa_0 * (1 - hat_probZ)
+     # Calculate the term to add on.
+     add.term <- (weighted.mean(predict(secondstage.reg, newdata = mutate(
+         filter(example.data, D == 1), Z = 0, D = 0, X_minus = 0, K_0 = 0)),
+             kappa.weight[example.data$D == 1])
+         - weighted.mean(predict(secondstage.reg, newdata = mutate(
+             filter(example.data, D == 0), Z = 0, D = 0, X_minus = 0, K_1 = 0)),
+                 kappa.weight[example.data$D == 0]))
+     indirect.est <- indirect.est + add.term
+     # Return the mean estimates.
+     output.list <- list(
+         "first-stage"     = mean(firststage.est),
+         "direct-effect"   = mean(direct.est),
+         "indirect-effect" = mean(firststage.est * indirect.est))
+     # Return the output.list
+     return(output.list)
+ }
> 
> # Bootstrap the estimates.
> estimated.loop <- function(boot.reps, example.data,
+         sample.size = sample.N, bootstrap = TRUE){
+     # Define lists the will be returned:
+     # 2. Naive OLS.
+     ols_direct_effect <- c()
+     ols_indirect_effect <- c()
+     # 3. Control function.
+     cf_direct_effect <- c()
+     cf_indirect_effect <- c()
+     # More in the future ....
+     ## Loop across the bootstraps values.
+     for (i in seq(1, boot.reps)){
+         # If bootstrapping, just resample from provided data.
+         if (bootstrap == TRUE) {
+             boot.indicies <- sample(seq(1, sample.size), sample.size, replace = TRUE)
+             boot.data <- example.data[boot.indicies, ]
+         }
+         # If a regular re-simulation, get new data.
+         else if (bootstrap == FALSE){
+             boot.data <- simulate.data(0.5, 1, 2, 0.25)
+             if ((100 * (i / boot.reps)) %% 1 == 0) {
+                 print(paste0(i, " out of ", boot.reps, ", ", 100 * (i / boot.reps), "% done."))
+             }
+         }
+         else {stop("The `bootstrap' option only takes values of TRUE or FALSE.")}
+         # Calculate the truth values, given the simulated data
+         truth.est <- theoretical.values(example.data)
+         # Now get the mediation effects, by different approaches.
+         # 2. OLS estimate of second-stage
+         ols_firststage.reg <- lm(D ~ (1 + Z) + X_minus + X_IV, data = boot.data)
+         ols_secondstage.reg <- lm(Y ~ 1 + Z * D + X_minus, data = boot.data)
+         ols.est <- estimated.values(ols_firststage.reg, ols_secondstage.reg, boot.data)
+         # 3. Control Function estimates.
+         cf_firststage.reg <- lm(D ~ (1 + Z) * X_IV *
+             bs(X_minus, df = 20, intercept = TRUE),
+             data = boot.data)
+         boot.data$D_hat <- cf_firststage.reg$fitted
+         control.fun <- ecdf(boot.data$D_hat)
+         boot.data$K <- control.fun(boot.data$D_hat)
+         boot.data$K_0 <- (1 - boot.data$D) * boot.data$K
+         boot.data$K_1 <- boot.data$D * boot.data$K
+         cf_secondstage.reg <- lm(
+             Y ~ (1 + Z * D) + X_minus +
+             bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE) +
+             bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE),
+             #bs(K, knots = seq(-1, 1, by = 0.025), intercept = FALSE),
+             data = boot.data)
+         cf.est <- estimated.values(cf_firststage.reg, cf_secondstage.reg, boot.data)
+         # Save the outputs.
+         ols_direct_effect[i]   <- ols.est$`direct-effect`
+         ols_indirect_effect[i] <- ols.est$`indirect-effect`
+         cf_direct_effect[i]    <- cf.est$`direct-effect`
+         cf_indirect_effect[i]  <- cf.est$`indirect-effect`
+     }
+     # Return the bootstrap data.
+     output.list <- list()
+     output.list$data <- data.frame(
+         truth_direct_effect   = as.numeric(truth.est$average_direct_effect),
+         ols_direct_effect     = ols_direct_effect,
+         cf_direct_effect      = cf_direct_effect,
+         truth_indirect_effect = as.numeric(truth.est$average_indirect_effect),
+         ols_indirect_effect   = ols_indirect_effect,
+         cf_indirect_effect    = cf_indirect_effect
+     )
+     # Calculate the needed statistics, to return
+     output.list$estimates <- data.frame(
+         # Truth
+         truth_direct_effect     = as.numeric(truth.est$average_direct_effect),
+         truth_indirect_effect   = as.numeric(truth.est$average_indirect_effect),
+         # OLS mean, and the 95% confidence intervals
+         ols_direct_effect       = as.numeric(mean(ols_direct_effect)),
+         ols_direct_effect_se    = as.numeric(sd(ols_direct_effect)),
+         ols_direct_effect_up    = as.numeric(quantile(ols_direct_effect, probs = 0.975)),
+         ols_direct_effect_low   = as.numeric(quantile(ols_direct_effect, probs = 0.025)),
+         ols_indirect_effect     = as.numeric(mean(ols_indirect_effect)),
+         ols_indirect_effect_se  = as.numeric(sd(ols_indirect_effect)),
+         ols_indirect_effect_up  = as.numeric(quantile(ols_indirect_effect, probs = 0.975)),
+         ols_indirect_effect_low = as.numeric(quantile(ols_indirect_effect, probs = 0.025)),
+         # Control Fun mean, and the 95% confidence intervals
+         cf_direct_effect        = as.numeric(mean(cf_direct_effect)),
+         cf_direct_effect_se     = as.numeric(sd(cf_direct_effect)),
+         cf_direct_effect_up     = as.numeric(quantile(cf_direct_effect, probs = 0.975)),
+         cf_direct_effect_low    = as.numeric(quantile(cf_direct_effect, probs = 0.025)),
+         cf_indirect_effect      = as.numeric(mean(cf_indirect_effect)),
+         cf_indirect_effect_se   = as.numeric(sd(cf_indirect_effect)),
+         cf_indirect_effect_up   = as.numeric(quantile(cf_indirect_effect, probs = 0.975)),
+         cf_indirect_effect_low  = as.numeric(quantile(cf_indirect_effect, probs = 0.025))
+     )
+     return(output.list)
+ }
> 
> 
> ################################################################################
> ## Compare estimation methods, in one simulation.
> 
> ## Simulate the data: rho, sigma_0, sigma_1, sigma_C = 0.5, 1, 2, 1.
> simulated.data <- simulate.data(0.5, 1, 2, 0.25)
> # SHow the theoretical direct + indirect values
> print(theoretical.values(simulated.data, print.truth = TRUE))
[1] "Here is a summary of the (unobserved) true effects:"
[1] "How many compliers in the system?"
   D_0
D_1      0      1
  0 0.2298 0.0000
  1 0.6529 0.1173
[1] "The average total effect:" "2.58452939042826"         
[1] "The average first-stage:" "0.6529"                  
[1] "The average direct effect:" "1.437"                     
[1] "The average indirect effect:" "1.13402939042826"            
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> 
> # Show that the regression specification holds exactly (after debiasing outcome).
> true_firststage.reg <- glm(D ~ (1 + Z) + X_IV +
+     bs(X_minus, df = 5, intercept = TRUE),
+     family = binomial(link = "probit"), data = simulated.data)
> simulated.data$K_0 <- (1 - simulated.data$D) * simulated.data$U_0
> simulated.data$K_1 <- simulated.data$D * simulated.data$U_1
> true_secondstage.reg <- lm(Y ~ (1 + Z * D) + X_minus +
+     # including the unobserved errors: U_0 + (D * U_0) + (D * U_1),
+     K_0 + K_1,
+     data = simulated.data)
> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(estimated.values(true_firststage.reg, true_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6542521

$`direct-effect`
[1] 1.437

$`indirect-effect`
[1] 1.129131

> # This is because the truth second-stage is perfect:
> print(summary(true_secondstage.reg))

Call:
lm(formula = Y ~ (1 + Z * D) + X_minus + K_0 + K_1, data = simulated.data)

Residuals:
       Min         1Q     Median         3Q        Max 
-6.075e-12 -1.600e-15 -4.000e-16  5.000e-16  9.093e-12 

Coefficients:
             Estimate Std. Error   t value Pr(>|t|)    
(Intercept) 8.193e-14  5.100e-15 1.607e+01   <2e-16 ***
Z           1.000e+00  3.759e-15 2.660e+14   <2e-16 ***
D           1.000e+00  5.715e-15 1.750e+14   <2e-16 ***
X_minus     1.000e+00  1.175e-15 8.514e+14   <2e-16 ***
K_0         1.000e+00  1.472e-15 6.795e+14   <2e-16 ***
K_1         1.000e+00  9.932e-16 1.007e+15   <2e-16 ***
Z:D         1.000e+00  6.515e-15 1.535e+14   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.117e-13 on 9993 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1 
F-statistic: 7.174e+29 on 6 and 9993 DF,  p-value: < 2.2e-16

> 
> # Show how the OLS result gives a bias result (if rho != 0)
> ols_firststage.reg <- lm(D ~ (1 + Z) + X_minus + X_IV, data = simulated.data)
> ols_secondstage.reg <- lm(Y ~ 1 + Z * D + X_minus, data = simulated.data)
> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(estimated.values(ols_firststage.reg, ols_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6540601

$`direct-effect`
[1] 0.4654462

$`indirect-effect`
[1] 2.126994

> 
> # Show how (unknown) control function gets it correct, in 2 steps (with splines)
> # -> Use the estimated CDF as the control function (as in Imbens Newey 2009).
> cf_firststage.reg <- lm(D ~ (1 + Z) * X_IV *
+     bs(X_minus, df = 20, intercept = TRUE),
+     data = simulated.data)
> simulated.data$D_hat <- cf_firststage.reg$fitted
> control.fun <- ecdf(simulated.data$D_hat)
> simulated.data$K <- control.fun(simulated.data$D_hat)
> simulated.data$K_0 <- (1 - simulated.data$D) * simulated.data$K
> simulated.data$K_1 <- simulated.data$D * simulated.data$K
> cf_secondstage.reg <- lm(Y ~ (1 + Z * D) + X_minus +
+     bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE) +
+     bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE),
+     #bs(K, knots = seq(-1, 1, by = 0.05), intercept = FALSE),
+     data = simulated.data)
> print(summary(cf_secondstage.reg))

Call:
lm(formula = Y ~ (1 + Z * D) + X_minus + bs(K_0, knots = seq(0, 
    1, by = 0.025), intercept = FALSE) + bs(K_1, knots = seq(0, 
    1, by = 0.025), intercept = FALSE), data = simulated.data)

Residuals:
    Min      1Q  Median      3Q     Max 
-5.6464 -0.8453 -0.0364  0.8280  5.8670 

Coefficients: (5 not defined because of singularities)
                                                              Estimate
(Intercept)                                                 -6.645e-01
Z                                                            9.540e-01
D                                                            1.743e+00
X_minus                                                      9.981e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)1   2.232e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)2   1.183e+00
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)3   4.164e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)4   7.056e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)5   7.538e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)6   7.369e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)7   7.964e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)8   5.830e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)9   6.505e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)10  8.010e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)11  3.841e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)12  8.113e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)13  8.514e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)14  6.129e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)15  8.462e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)16  3.975e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)17  7.615e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)18  5.560e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)19  6.823e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)20  4.754e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)21  5.233e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)22  6.653e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)23  5.563e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)24  9.992e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)25  2.777e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)26  9.785e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)27  2.298e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)28  1.158e+00
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)29  5.111e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)30  1.324e+00
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)31  4.761e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)32  6.775e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)33  3.529e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)34  5.883e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)35  5.887e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)36  6.418e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)37  6.887e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)38  8.320e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)39  9.950e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)40 -3.515e-01
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)41  1.629e+00
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)42  1.464e+00
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)43         NA
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)44         NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)1          NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)2  -2.305e+04
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)3   1.407e+02
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)4   9.496e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)5  -3.131e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)6   5.913e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)7   2.240e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)8   6.082e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)9   8.117e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)10  4.838e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)11  2.233e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)12  2.309e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)13  3.251e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)14  2.420e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)15  3.214e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)16  2.482e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)17  2.814e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)18  1.858e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)19  2.477e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)20  1.690e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)21  2.020e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)22  1.702e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)23  1.344e+00
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)24  6.099e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)25  9.887e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)26  9.560e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)27  4.741e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)28  9.656e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)29  2.190e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)30  5.043e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)31  4.212e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)32  3.338e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)33  1.248e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)34  4.304e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)35 -2.887e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)36  6.745e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)37 -5.931e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)38  4.020e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)39 -6.123e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)40  4.829e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)41 -4.987e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)42 -3.010e-01
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)43         NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)44         NA
Z:D                                                          1.052e+00
                                                            Std. Error t value
(Intercept)                                                  1.339e+00  -0.496
Z                                                            1.573e-01   6.067
D                                                            4.690e-01   3.717
X_minus                                                      3.291e-02  30.329
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)1   1.382e+00   0.162
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)2   1.384e+00   0.855
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)3   1.382e+00   0.301
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)4   1.372e+00   0.514
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)5   1.365e+00   0.552
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)6   1.364e+00   0.540
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)7   1.366e+00   0.583
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)8   1.363e+00   0.428
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)9   1.361e+00   0.478
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)10  1.361e+00   0.589
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)11  1.361e+00   0.282
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)12  1.363e+00   0.595
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)13  1.363e+00   0.625
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)14  1.364e+00   0.449
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)15  1.360e+00   0.622
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)16  1.360e+00   0.292
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)17  1.361e+00   0.559
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)18  1.361e+00   0.409
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)19  1.363e+00   0.501
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)20  1.360e+00   0.350
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)21  1.361e+00   0.385
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)22  1.359e+00   0.489
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)23  1.363e+00   0.408
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)24  1.362e+00   0.734
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)25  1.367e+00   0.203
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)26  1.370e+00   0.714
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)27  1.373e+00   0.167
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)28  1.377e+00   0.841
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)29  1.385e+00   0.369
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)30  1.390e+00   0.952
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)31  1.400e+00   0.340
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)32  1.407e+00   0.481
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)33  1.421e+00   0.248
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)34  1.425e+00   0.413
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)35  1.431e+00   0.411
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)36  1.443e+00   0.445
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)37  1.464e+00   0.470
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)38  1.466e+00   0.568
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)39  1.574e+00   0.632
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)40  1.731e+00  -0.203
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)41  1.904e+00   0.856
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)42  2.587e+00   0.566
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)43         NA      NA
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)44         NA      NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)1          NA      NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)2   1.627e+04  -1.416
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)3   1.048e+02   1.343
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)4   8.089e+00   0.117
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)5   3.280e+00  -0.095
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)6   1.774e+00   3.332
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)7   1.320e+00   1.697
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)8   1.173e+00   5.185
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)9   9.686e-01   0.838
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)10  9.416e-01   5.138
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)11  8.500e-01   2.628
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)12  7.766e-01   2.973
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)13  6.795e-01   4.784
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)14  6.193e-01   3.908
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)15  6.132e-01   5.242
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)16  6.540e-01   3.794
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)17  6.033e-01   4.665
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)18  5.598e-01   3.320
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)19  5.207e-01   4.757
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)20  5.032e-01   3.360
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)21  4.767e-01   4.238
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)22  4.436e-01   3.836
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)23  4.144e-01   3.244
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)24  3.938e-01   1.549
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)25  3.845e-01   2.572
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)26  3.683e-01   2.596
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)27  3.719e-01   1.275
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)28  3.594e-01   2.687
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)29  3.591e-01   0.610
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)30  3.530e-01   1.429
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)31  3.538e-01   1.190
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)32  3.463e-01   0.964
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)33  3.413e-01   0.366
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)34  3.433e-01   1.254
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)35  3.396e-01  -0.850
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)36  3.401e-01   1.984
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)37  3.359e-01  -1.766
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)38  3.475e-01   1.157
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)39  3.231e-01  -1.895
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)40  3.800e-01   1.271
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)41  3.150e-01  -1.583
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)42  4.973e-01  -0.605
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)43         NA      NA
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)44         NA      NA
Z:D                                                          1.777e-01   5.923
                                                            Pr(>|t|)    
(Intercept)                                                 0.619590    
Z                                                           1.35e-09 ***
D                                                           0.000203 ***
X_minus                                                      < 2e-16 ***
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)1  0.871687    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)2  0.392601    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)3  0.763159    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)4  0.607147    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)5  0.580848    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)6  0.589095    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)7  0.559882    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)8  0.668960    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)9  0.632591    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)10 0.556140    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)11 0.777779    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)12 0.551797    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)13 0.532239    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)14 0.653108    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)15 0.533875    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)16 0.770160    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)17 0.575969    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)18 0.682817    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)19 0.616690    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)20 0.726578    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)21 0.700585    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)22 0.624548    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)23 0.683229    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)24 0.463103    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)25 0.839000    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)26 0.475113    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)27 0.867030    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)28 0.400292    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)29 0.712155    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)30 0.341025    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)31 0.733836    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)32 0.630173    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)33 0.803857    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)34 0.679717    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)35 0.680860    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)36 0.656412    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)37 0.638072    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)38 0.570270    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)39 0.527183    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)40 0.839041    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)41 0.392123    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)42 0.571320    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)43       NA    
bs(K_0, knots = seq(0, 1, by = 0.025), intercept = FALSE)44       NA    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)1        NA    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)2  0.156730    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)3  0.179290    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)4  0.906558    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)5  0.923949    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)6  0.000864 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)7  0.089787 .  
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)8  2.20e-07 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)9  0.402039    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)10 2.83e-07 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)11 0.008614 ** 
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)12 0.002952 ** 
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)13 1.74e-06 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)14 9.36e-05 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)15 1.62e-07 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)16 0.000149 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)17 3.13e-06 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)18 0.000905 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)19 1.99e-06 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)20 0.000784 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)21 2.28e-05 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)22 0.000126 ***
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)23 0.001182 ** 
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)24 0.121465    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)25 0.010139 *  
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)26 0.009458 ** 
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)27 0.202355    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)28 0.007230 ** 
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)29 0.541957    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)30 0.153097    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)31 0.233901    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)32 0.335182    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)33 0.714659    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)34 0.209879    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)35 0.395235    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)36 0.047322 *  
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)37 0.077501 .  
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)38 0.247367    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)39 0.058083 .  
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)40 0.203860    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)41 0.113451    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)42 0.544939    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)43       NA    
bs(K_1, knots = seq(0, 1, by = 0.025), intercept = FALSE)44       NA    
Z:D                                                         3.27e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.334 on 9912 degrees of freedom
Multiple R-squared:  0.6714,	Adjusted R-squared:  0.6685 
F-statistic: 232.8 on 87 and 9912 DF,  p-value: < 2.2e-16

> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(estimated.values(cf_firststage.reg, cf_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6541503

$`direct-effect`
[1] 1.413938

$`indirect-effect`
[1] 1.151033

Warning messages:
1: In predict.lm(secondstage.reg, newdata = mutate(example.data, D = 1)) :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
2: In predict.lm(secondstage.reg, newdata = mutate(example.data, D = 0)) :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
3: In predict.lm(secondstage.reg, newdata = mutate(filter(example.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> 
> #! Test, add on the K_0 and K_1 conditional on D_i = 0,1 respectively in truth
> firststage.est <- predict(
+     true_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         true_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")
> # calculate the second-stage indirect effect
> indirect.est <- predict(
+     true_secondstage.reg, newdata = mutate(simulated.data, D = 1)) -
+     predict(true_secondstage.reg, newdata = mutate(simulated.data, D = 0))
> add.term <- (mean(simulated.data$K_1[simulated.data$D_0 == 0 & simulated.data$D_1 == 1 & simulated.data$D == 1])
+     - mean(simulated.data$K_0[simulated.data$D_0 == 0 & simulated.data$D_1 == 1 & simulated.data$D == 1]))
> print(mean(firststage.est * (indirect.est + add.term)))
[1] 1.47837
> #! Do the same thing, but kappa weighted to the compliers inside the CF estimate.
> firststage.est <- predict(
+     cf_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         cf_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")
> # calculate the second-stage indirect effect
> indirect.est <- predict(
+     cf_secondstage.reg, newdata = mutate(simulated.data, D = 1)) -
+     predict(cf_secondstage.reg, newdata = mutate(simulated.data, D = 0))
Warning messages:
1: In predict.lm(cf_secondstage.reg, newdata = mutate(simulated.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
2: In predict.lm(cf_secondstage.reg, newdata = mutate(simulated.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> # Estimate the kappa-weight
> hat_probZ <- 0.5
> kappa_1 <- simulated.data$D * ((simulated.data$Z - hat_probZ) / (
+     (1 - hat_probZ) * hat_probZ))
> kappa_0 <- (1 - simulated.data$D) * (((1 - simulated.data$Z) - (1 - hat_probZ)) / (
+     (1 - hat_probZ) * hat_probZ))
> kappa.weight <- kappa_1 * hat_probZ + kappa_0 * (1 - hat_probZ)
> # Calculate the term to add on.
> add.term <- (weighted.mean(simulated.data$K_1[simulated.data$D == 1],
+         kappa.weight[simulated.data$D == 1])
+     - weighted.mean(simulated.data$K_0[simulated.data$D == 0],
+         kappa.weight[simulated.data$D == 0]))
> mean(firststage.est * (indirect.est + add.term))
[1] 1.972354
> 
> #! Test: show the ADE given Z_i = 1, and similar for AIE
> firststage.est <- predict(
+     true_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         true_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")
> # calculate the second-stage direct effect
> direct.est <- predict(
+     true_secondstage.reg, newdata = mutate(simulated.data, Z = 1)) -
+     predict(true_secondstage.reg, newdata = mutate(simulated.data, Z = 0))
> # calculate the second-stage indirect effect
> indirect.est <- predict(
+     true_secondstage.reg, newdata = mutate(simulated.data, D = 1)) -
+     predict(true_secondstage.reg, newdata = mutate(simulated.data, D = 0))
> # Return the mean estimates.
> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(c("first-stage",     mean(firststage.est)))
[1] "first-stage"       "0.654252051084466"
> print(c("direct-effect",   mean(direct.est)))
[1] "direct-effect"    "1.43699999999971"
> print(c("indirect-effect", mean(firststage.est * indirect.est)))
[1] "indirect-effect"   "0.977118345334095"
> # Get the treated versions
> Z <- simulated.data$Z
> D <- simulated.data$D
> Y <- simulated.data$Y
> D_0 <- simulated.data$D_0
> D_1 <- simulated.data$D_1
> Y_0_0 <- simulated.data$Y_0_0
> Y_0_1 <- simulated.data$Y_0_1
> Y_1_0 <- simulated.data$Y_1_0
> Y_1_1 <- simulated.data$Y_1_1
> # AIE, estimae vs the group differences term.
> print(c("indirect-effect", mean(firststage.est * indirect.est)))
[1] "indirect-effect"   "0.977118345334095"
> indirect_effect <- (Z * (Y_1_1 - Y_1_0) + (1 - Z) * (Y_0_1 - Y_0_0))
> print(mean(indirect_effect * (D_1 != D_0)))
[1] 1.134029
> print(mean(indirect_effect * mean(D_1 != D_0)))
[1] 0.9888216
> print(estimated.values(true_firststage.reg, true_secondstage.reg, simulated.data)$`indirect-effect`)
[1] 1.469438
> 
> # ADE, estimate vs group differences term.
> print(c("direct-effect",   mean(direct.est)))
[1] "direct-effect"    "1.43699999999971"
> direct_effect <- (D * (Y_1_1 - Y_0_1) + (1 - D) * (Y_1_0 - Y_0_0))
> print(mean(direct_effect))
[1] 1.437
> print(mean(direct_effect[Z == 1]))
[1] 1.769371
> 
> #! Test: note the difference between AIE and LAIE (i.e., group differences term).
> # show gains to D, on average
> print(mean(simulated.data$Z * (simulated.data$Y_1_1 - simulated.data$Y_1_0) +
+     (1 - simulated.data$Z) * (simulated.data$Y_0_1 - simulated.data$Y_0_0)))
[1] 1.514507
> # show gains to D, among compliers
> print(mean((simulated.data$Z * (simulated.data$Y_1_1 - simulated.data$Y_1_0) +
+     (1 - simulated.data$Z) * (simulated.data$Y_0_1 - simulated.data$Y_0_0)) * (
+         simulated.data$D_1 == 1 & simulated.data$D_0 == 0)))
[1] 1.134029
> 
> #! Test, get compliers correct
> #! -> needs a different weighting scheme
> #! -> Abadie (2003) kappa weights do not get it correct.
> library(mgcv)
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.9-1. For overview type 'help("mgcv-package")'.
> cf_firststage.reg <- lm(D ~ (1 + Z) * X_IV * bs(X_minus, df = 20, intercept = TRUE),
+     data = simulated.data)
> complier.weights <- predict(
+     cf_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         cf_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")
> complier.weights[complier.weights < 0] <- 0
> complier_secondstage.reg <- lm(Y ~ (1 + Z * D) + X_minus +
+     bs(K, knots = seq(-1, 1, by = 0.05)),
+     weights = complier.weights,
+     data = simulated.data)
> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(estimated.values(cf_firststage.reg, complier_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6541503

$`direct-effect`
[1] 1.426089

$`indirect-effect`
[1] 1.169998

> 
> #! Test: including the K_0 and K_1 terms in complier gains
> simulated.data$K_0 <- (1 - simulated.data$D) * (1 - cf_firststage.reg$residuals)
> simulated.data$K_1 <- simulated.data$D * cf_firststage.reg$residuals
> complier_secondstage.reg <- lm(Y ~ (1 + Z * D) + X_minus +
+     bs(K_0, knots = seq(-0.05, 1.05, by = 0.05)) +
+     bs(K_1, knots = seq(-0.05, 1.05, by = 0.05)),
+     data = simulated.data)
> 
> # Get the returns estimate correct.
> print(mean((simulated.data$Y_0_1 - simulated.data$Y_0_0)[
+         simulated.data$Z == 0]))
[1] 1.003902
> print(mean((simulated.data$Y_0_1 - simulated.data$Y_0_0)[
+         simulated.data$Z == 0 & simulated.data$D_1 == 1 & simulated.data$D_0 == 0]))
[1] 1.224703
> print(mean((predict(
+     cf_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         cf_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")) * (
+     predict(complier_secondstage.reg,
+         newdata = mutate(simulated.data, Z = 0, D = 1, K_0 = 0, K_1 = K_1)) -
+     predict(complier_secondstage.reg,
+         newdata = mutate(simulated.data, Z = 0, D = 0, K_0 = K_0, K_1 = 0)))))
[1] 0.9083386
Warning message:
In predict.lm(complier_secondstage.reg, newdata = mutate(simulated.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> print(mean(predict(complier_secondstage.reg,
+         newdata = mutate(simulated.data, Z = 0, D = 1, K_0 = 0, K_1 = 0)) -
+     predict(complier_secondstage.reg,
+         newdata = mutate(simulated.data, Z = 0, D = 0, K_0 = 0, K_1 = 0))))
[1] 1.064734
Warning message:
In predict.lm(complier_secondstage.reg, newdata = mutate(simulated.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> 
> # calculate the second-stage indirect effect
> firststage.est <- predict(
+     cf_firststage.reg, newdata = mutate(simulated.data, Z = 1), type = "response") - predict(
+         cf_firststage.reg, newdata = mutate(simulated.data, Z = 0), type = "response")
> indirect.est <- predict(
+     complier_secondstage.reg, newdata = mutate(simulated.data, D = 1, K_0 = 0)) -
+         predict(complier_secondstage.reg, newdata = mutate(simulated.data, D = 0, K_1 = 0))
Warning message:
In predict.lm(complier_secondstage.reg, newdata = mutate(simulated.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> direct.est <- predict(
+     complier_secondstage.reg, newdata = mutate(simulated.data, Z = 1)) -
+         predict(complier_secondstage.reg, newdata = mutate(simulated.data, Z = 0))
> # Show the means
> print(theoretical.values(simulated.data))
$average_first_stage
[1] 0.6529

$average_total_effect
[1] 2.584529

$average_direct_effect
[1] 1.437

$average_indirect_effect
[1] 1.134029

> print(mean(direct.est))
[1] 1.417255
> print(mean(firststage.est * indirect.est))
[1] 1.265826
> # Compared the un-weighted version (which has group differences bias).
> print(estimated.values(cf_firststage.reg, complier_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6541503

$`direct-effect`
[1] 1.417255

$`indirect-effect`
[1] 1.147137

Warning messages:
1: In predict.lm(secondstage.reg, newdata = mutate(example.data, D = 1)) :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
2: In predict.lm(secondstage.reg, newdata = mutate(example.data, D = 0)) :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
3: In predict.lm(secondstage.reg, newdata = mutate(filter(example.data,  :
  prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases
> print(estimated.values(cf_firststage.reg, cf_secondstage.reg, simulated.data))
$`first-stage`
[1] 0.6541503

$`direct-effect`
[1] NaN

$`indirect-effect`
[1] NaN

There were 15 warnings (use warnings() to see them)
> 
> 
> ################################################################################
> ## Plot bootstrap results for one DGP
> 
> # Base data to test out.
> simulated.data <- simulate.data(0.5, 1, 2, 0.25)
> 
> # Get bootstrapped point est for the CF approach
> boot.reps <- 10^2
> boot.est <- estimated.loop(boot.reps, simulated.data, bootstrap = FALSE)
[1] "1 out of 100, 1% done."
[1] "2 out of 100, 2% done."
[1] "3 out of 100, 3% done."
[1] "4 out of 100, 4% done."
[1] "5 out of 100, 5% done."
[1] "6 out of 100, 6% done."
[1] "8 out of 100, 8% done."
[1] "9 out of 100, 9% done."
[1] "10 out of 100, 10% done."
[1] "11 out of 100, 11% done."
[1] "12 out of 100, 12% done."
[1] "13 out of 100, 13% done."
[1] "15 out of 100, 15% done."
[1] "16 out of 100, 16% done."
[1] "17 out of 100, 17% done."
[1] "18 out of 100, 18% done."
[1] "19 out of 100, 19% done."
[1] "20 out of 100, 20% done."
[1] "21 out of 100, 21% done."
[1] "22 out of 100, 22% done."
[1] "23 out of 100, 23% done."
[1] "24 out of 100, 24% done."
[1] "25 out of 100, 25% done."
[1] "26 out of 100, 26% done."
[1] "27 out of 100, 27% done."
[1] "30 out of 100, 30% done."
[1] "31 out of 100, 31% done."
[1] "32 out of 100, 32% done."
[1] "33 out of 100, 33% done."
[1] "34 out of 100, 34% done."
[1] "35 out of 100, 35% done."
[1] "36 out of 100, 36% done."
[1] "37 out of 100, 37% done."
[1] "38 out of 100, 38% done."
[1] "39 out of 100, 39% done."
[1] "40 out of 100, 40% done."
[1] "41 out of 100, 41% done."
[1] "42 out of 100, 42% done."
[1] "43 out of 100, 43% done."
[1] "44 out of 100, 44% done."
[1] "45 out of 100, 45% done."
[1] "46 out of 100, 46% done."
[1] "47 out of 100, 47% done."
[1] "48 out of 100, 48% done."
[1] "49 out of 100, 49% done."
[1] "50 out of 100, 50% done."
[1] "51 out of 100, 51% done."
[1] "52 out of 100, 52% done."
[1] "53 out of 100, 53% done."
[1] "54 out of 100, 54% done."
[1] "59 out of 100, 59% done."
[1] "60 out of 100, 60% done."
[1] "61 out of 100, 61% done."
[1] "62 out of 100, 62% done."
[1] "63 out of 100, 63% done."
[1] "64 out of 100, 64% done."
[1] "65 out of 100, 65% done."
[1] "66 out of 100, 66% done."
[1] "67 out of 100, 67% done."
[1] "68 out of 100, 68% done."
[1] "69 out of 100, 69% done."
[1] "70 out of 100, 70% done."
[1] "71 out of 100, 71% done."
[1] "72 out of 100, 72% done."
[1] "73 out of 100, 73% done."
[1] "74 out of 100, 74% done."
[1] "75 out of 100, 75% done."
[1] "76 out of 100, 76% done."
[1] "77 out of 100, 77% done."
[1] "78 out of 100, 78% done."
[1] "79 out of 100, 79% done."
[1] "80 out of 100, 80% done."
[1] "81 out of 100, 81% done."
[1] "82 out of 100, 82% done."
[1] "83 out of 100, 83% done."
[1] "84 out of 100, 84% done."
[1] "85 out of 100, 85% done."
[1] "86 out of 100, 86% done."
[1] "87 out of 100, 87% done."
[1] "88 out of 100, 88% done."
[1] "89 out of 100, 89% done."
[1] "90 out of 100, 90% done."
[1] "91 out of 100, 91% done."
[1] "92 out of 100, 92% done."
[1] "93 out of 100, 93% done."
[1] "94 out of 100, 94% done."
[1] "95 out of 100, 95% done."
[1] "96 out of 100, 96% done."
[1] "97 out of 100, 97% done."
[1] "98 out of 100, 98% done."
[1] "99 out of 100, 99% done."
[1] "100 out of 100, 100% done."
There were 50 or more warnings (use warnings() to see the first 50)
> boot.data <- boot.est$data
> 
> ## Save the bootstrapped point estimates data.
> boot.data %>% write_csv(file.path(output.folder, "boot-sim-data-test.csv"))
> exit.
Error: object 'exit.' not found
Execution halted
