
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 7 May 2025
> ## Plot the estimates for indirect + direct effects, with semiparametric CF.
> # Show the date:
> print(format(Sys.time(), "%H:%M %Z %A, %d %B %Y"))
[1] "22:12 EDT Sunday, 08 June 2025"
> 
> ## Load libraries
> # Functions for data manipulation and visualisation
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.2     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> # Library for better colour choice.
> library(ggthemes)
> # Library for equations in plots
> library(latex2exp)
> 
> ## Set up the R environment
> set.seed(47)
> # Define number of digits in tables and graphs
> digits.no <- 3
> # Define where output files go.
> output.folder <- file.path("sim-output")
> # Set the options for the plot sizes, in saving ggplot output.
> fig.height <- 10
> fig.width <- fig.height
> # Define colours to use.
> colour.list <- c("orange", "blue", "#2ca02c") # Orange, blue, Green
> 
> 
> ################################################################################
> ## Load the simulated data.  (saved as separate file in advance.)
> 
> # Load data from normal DGP-strapping 10,000 times.
> normal.data <- read_csv(file.path(output.folder, "normal-cf-data.csv"))
Rows: 10000 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): truth_total_effect, ols_total_effect, truth_direct_effect, ols_dir...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(normal.data)
# A tibble: 10,000 × 10
   truth_total_effect ols_total_effect truth_direct_effect ols_direct_effect
                <dbl>            <dbl>               <dbl>             <dbl>
 1               2.61             2.62                1.40             0.941
 2               2.62             2.52                1.38             0.881
 3               2.57             2.60                1.39             0.864
 4               2.66             2.63                1.39             1.01 
 5               2.61             2.70                1.36             1.05 
 6               2.54             2.57                1.36             1.12 
 7               2.58             2.53                1.39             0.745
 8               2.61             2.49                1.39             0.652
 9               2.56             2.55                1.37             0.751
10               2.58             2.53                1.39             0.913
# ℹ 9,990 more rows
# ℹ 6 more variables: heckit_direct_effect <dbl>, cf_direct_effect <dbl>,
#   truth_indirect_effect <dbl>, ols_indirect_effect <dbl>,
#   heckit_indirect_effect <dbl>, cf_indirect_effect <dbl>
> 
> # Load data from uniform DGP-strapping 10,000 times.
> uniform.data <- read_csv(file.path(output.folder, "uniform-cf-data.csv"))
Rows: 10000 Columns: 8
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (8): truth_direct_effect, ols_direct_effect, heckit_direct_effect, cf_di...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(uniform.data)
# A tibble: 10,000 × 8
   truth_direct_effect ols_direct_effect heckit_direct_effect cf_direct_effect
                 <dbl>             <dbl>                <dbl>            <dbl>
 1                1.34             0.939                1.72              1.98
 2                1.39             0.947                1.01              1.11
 3                1.37             1.01                 0.961             1.11
 4                1.37             0.881                1.59              1.82
 5                1.38             0.934                1.43              1.46
 6                1.38             1.05                 1.35              1.45
 7                1.38             0.994                1.71              1.70
 8                1.40             1.13                 1.48              1.66
 9                1.38             0.927                1.33              1.48
10                1.41             1.02                 1.09              1.20
# ℹ 9,990 more rows
# ℹ 4 more variables: truth_indirect_effect <dbl>, ols_indirect_effect <dbl>,
#   heckit_indirect_effect <dbl>, cf_indirect_effect <dbl>
> 
> 
> ################################################################################
> ## Normally dist errors: Plot dist of ADE and AIE estimates, around truth.
> 
> # ADE estimates, by type.
> direct_dist.plot <- normal.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = (ols_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     annotate("text", colour = colour.list[1],
+         x = 0.5, y = 4,
+         fontface = "bold",
+         label = ("Unadjusted"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[1],
+         x = 0.5, y = 3.875,
+         xend = -0.3, yend = 2.75,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Dist of CF estimates.
+     geom_density(aes(x = (heckit_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     annotate("text", colour = colour.list[2],
+         x = 0.5, y = 2.5,
+         fontface = "bold",
+         label = ("Parametric CF"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[2],
+         x = 0.5, y = 2.375,
+         xend = 0.25, yend = 1.25,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate $-$ True Value"),,
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "normal-direct-dist.png"),
+     plot = direct_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> # AIE estimates, by type.
> indirect_dist.plot <- normal.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = ols_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = heckit_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate $-$ True Value"),
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "normal-indirect-dist.png"),
+     plot = indirect_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> 
> ################################################################################
> ## Uniform dist errors: Plot dist of ADE and AIE estimates, around truth.
> 
> # ADE estimates, by type.
> direct_dist.plot <- normal.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = (ols_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     annotate("text", colour = colour.list[1],
+         x = 0.5, y = 4,
+         fontface = "bold",
+         label = ("Unadjusted"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[1],
+         x = 0.5, y = 3.875,
+         xend = -0.25, yend = 3,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Dist of Heckit estimates.
+     geom_density(aes(x = (heckit_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = (cf_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[3], alpha = 0.75) +
+     annotate("text", colour = colour.list[3],
+         x = 0.5, y = 2.5,
+         fontface = "bold",
+         label = ("Semi-parametric CF"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[3],
+         x = 0.675, y = 2.375,
+         xend = 0.4, yend = 0.75,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate $-$ True Value"),,
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "uniform-direct-dist.png"),
+     plot = direct_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
Warning message:
Removed 28 rows containing non-finite outside the scale range
(`stat_density()`). 
> 
> # AIE estimates, by type.
> indirect_dist.plot <- normal.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = ols_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = heckit_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = cf_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[3], alpha = 0.75) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate $-$ True Value"),
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "uniform-indirect-dist.png"),
+     plot = indirect_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
Warning message:
Removed 27 rows containing non-finite outside the scale range
(`stat_density()`). 
> 
> 
> ################################################################################
> ## Plot the estimates, by OLS + CF, different rho = Corr(U_0, U_1) values.
> 
> # Plot the bias in indirect effect est vs rho
> rho_indirecteffect_bias.plot <- rho.data %>%
+     ggplot(aes(x = rho)) +
+     # OLS est + 95 % CI
+     geom_point(aes(y = ols_indirect_effect), colour = colour.list[1]) +
+     geom_ribbon(aes(ymin = ols_indirect_effect_low, ymax = ols_indirect_effect_up),
+         fill = colour.list[1], alpha = 0.2) +
+     # CF est + 95 % CI
+     geom_point(aes(y = cf_indirect_effect), colour = colour.list[2]) +
+     geom_ribbon(aes(ymin = cf_indirect_effect_low, ymax = cf_indirect_effect_up),
+         fill = colour.list[2], alpha = 0.2) +
+     # Truth:
+     geom_line(aes(y = (truth_indirect_effect)),
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Presentation options
+     theme_bw() +
+     scale_x_continuous(
+         name = TeX("$\\rho$"),
+         expand = c(0, 0),
+         breaks = seq(-1, 1, by = 0.25),
+         limits = c(-1.025, 1.025)) +
+     scale_y_continuous(name = "",
+         breaks = seq(0, 2.5, by = 0.25),
+         limits = c(0, 2.5),
+         expand = c(0.01, 0.01)) +
+     ggtitle("Estimate") +
+     theme(plot.title = element_text(hjust = 0, size = rel(1)),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 1.5, 0.25), "mm"),
+         axis.title.x = element_text(vjust = -0.25))
Error: object 'rho.data' not found
Execution halted
