
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/R
> ## Senan Hogan-Hennessy, 7 May 2025
> ## Plot the estimates for indirect + direct effects, with semi-parametric CF.
> # Show the date:
> print(format(Sys.time(), "%H:%M %Z %A, %d %B %Y"))
[1] "16:46 EDT Wednesday, 07 May 2025"
> 
> ## Load libraries
> # Functions for data manipulation and visualisation
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.2     ✔ tibble    3.2.1
✔ lubridate 1.9.4     ✔ tidyr     1.3.1
✔ purrr     1.0.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> # Library for better colour choice.
> library(ggthemes)
> # Library for equations in plots
> library(latex2exp)
> 
> ## Set up the R environment
> set.seed(47)
> # Define number of digits in tables and graphs
> digits.no <- 3
> # Define where output files go.
> output.folder <- file.path("sim-output")
> # Set the options for the plot sizes, in saving ggplot output.
> fig.height <- 10
> fig.width <- fig.height
> # Define colours to use.
> colour.list <- c("orange", "#2ca02c") # Green
> 
> 
> ################################################################################
> ## Load the simulated data.  (saved as separate file in advance.)
> 
> # Load data from DGP-strapping 10,000 times.
> sim.data <- read_csv(file.path(output.folder, "dist-semiparametric-data.csv"))
Rows: 10000 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (6): truth_direct_effect, ols_direct_effect, cf_direct_effect, truth_ind...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> print(sim.data)
# A tibble: 10,000 × 6
   truth_direct_effect ols_direct_effect cf_direct_effect truth_indirect_effect
                 <dbl>             <dbl>            <dbl>                 <dbl>
 1                1.42             1.04              1.42                 0.853
 2                1.40             0.959             1.44                 0.918
 3                1.39             1.07              1.49                 0.820
 4                1.38             0.981             1.17                 0.826
 5                1.39             0.956             1.44                 0.848
 6                1.37             1.14              1.29                 0.834
 7                1.40             1.05              1.23                 0.847
 8                1.39             1.15              1.20                 0.795
 9                1.39             1.19              1.44                 0.739
10                1.41             1.06              1.42                 0.801
# ℹ 9,990 more rows
# ℹ 2 more variables: ols_indirect_effect <dbl>, cf_indirect_effect <dbl>
> #View(head(sim.data)
> 
> 
> ################################################################################
> ## Plot the dist of the ADE and AIE estimates, around truth.
> 
> # ADE estimates, by type.
> direct_dist.plot <- sim.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = (ols_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     annotate("text", colour = colour.list[1],
+         x = 0.5, y = 4,
+         fontface = "bold",
+         label = ("Unadjusted"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[1],
+         x = 0.5, y = 3.875,
+         xend = -0.25, yend = 3,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Dist of CF estimates.
+     geom_density(aes(x = (cf_direct_effect - truth_direct_effect),
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     annotate("text", colour = colour.list[2],
+         x = 0.5, y = 2.5,
+         fontface = "bold",
+         label = ("Semi-parametric CF"),
+         size = 4.25, hjust = 0.5, vjust = 0) +
+     annotate("curve", colour = colour.list[2],
+         x = 0.5, y = 2.375,
+         xend = 0.15, yend = 1.6,
+         linewidth = 0.75, curvature = -0.25,
+         arrow = arrow(length = unit(0.25, 'cm'))) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate$-$ True Value"),,
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "semiparametric-direct-dist.png"),
+     plot = direct_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
> 
> # AIE estimates, by type.
> indirect_dist.plot <- sim.data %>%
+     ggplot() +
+     # Dist of OLS estimates.
+     geom_density(aes(x = ols_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[1], alpha = 0.75) +
+     # Dist of CF estimates.
+     geom_density(aes(x = cf_indirect_effect - truth_indirect_effect,
+         y = after_stat(density)),
+         colour = "black", fill = colour.list[2], alpha = 0.75) +
+     # Truth value
+     geom_vline(xintercept = 0,
+         colour = "black", linetype = "dashed", linewidth = 1) +
+     # Other presentation options
+     theme_bw() +
+     scale_x_continuous(expand = c(0, 0),
+         name = TeX("Estimate$-$ True Value"),
+         breaks = seq(-1.0, 1.0, by = 0.25),
+         limits = c(-1.0, 1.0)) +
+     scale_y_continuous(expand = c(0, 0),
+         name = "", limits = c(0, 5.1)) +
+     ggtitle("Density") +
+     theme(plot.title = element_text(size = rel(1), hjust = 0),
+         plot.title.position = "plot",
+         plot.margin = unit(c(0.5, 3, 0, 0), "mm"))
> # Save this plot
> ggsave(file.path(output.folder, "semiparametric-indirect-dist.png"),
+     plot = indirect_dist.plot,
+     units = "cm", width = fig.width, height = fig.height)
Warning message:
Removed 8 rows containing non-finite outside the scale range
(`stat_density()`). 
> 
> proc.time()
   user  system elapsed 
  2.545   0.189   2.720 
